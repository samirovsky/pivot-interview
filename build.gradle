plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.diffplug.spotless' version '6.24.0'
}

group = 'com.pivotapp'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'

	// Open API
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	// Annotation processors
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// Test dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.hamcrest:hamcrest:2.2'



}

spotless {
	java {
		// Use the default importOrder configuration
		importOrder()
		removeUnusedImports()
		cleanthat()
		googleJavaFormat()
		formatAnnotations()
	}
}


jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree dir: it,
					exclude: ['sun/util/resources/cldr/provider/CLDRLocaleDataMetaInfo.class',
							  // Add any other exclusions here
					]
		}))
	}
}


test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // creates the reports after tests run
}